#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const http = require('http');





/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

let Server = require('socket.io');
let io = new Server(server);
let channelNSP = io.of('/channel');
let friendNSP = io.of('/friend');

channelNSP.on('connection', function(socket){
    /*
        Connection
     */
    console.log('User ' + socket.id + ' has connected!');
    socket.emit('message', "Global: Somebody has connected to a socket");

    /*
        Disconnection
     */
    socket.on('disconnect', function(){
        console.log('A user has disconnected.');
        io.emit('message', "Global: Somebody has disconnected from a socket.");
    });

    /*
        Room Join
     */
    socket.on('room', function(room){
        console.log("Joining room " + room);
        socket.join(room);
        console.log('ROOMS '+JSON.stringify(socket.rooms));
        socket.to(room).emit('message', 'Somebody has joined the channel!');
    });

    /*
        Messaging
     */
    //Room Messaging
    socket.on('message', function(msg, room){
        console.log('message', msg);
        console.log('room', room);
        socket.to(room).emit('message', msg);
        socket.emit('message', msg);
    });
    //Broadcast Messaging (into channels)
    socket.on('broadcast message', function(msg){
        console.log('BROADCASTING message', msg);
        socket.broadcast.emit('message', msg);
        socket.emit('message', msg);
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  console.log('Listening on port', server.address().port);
}
